
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 26 02:05:55 EEST 2022
//----------------------------------------------------

package org.hua;

import java_cup.runtime.Symbol;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 26 02:05:55 EEST 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\005\003\000\002\005" +
    "\004\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\015\012\000\002\014\002\000\002\014\003\000" +
    "\002\014\005\000\002\013\004\000\002\013\006\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\004\000\002\017\003" +
    "\000\002\017\004\000\002\010\005\000\002\010\010\000" +
    "\002\011\010\000\002\004\003\000\002\004\004\000\002" +
    "\003\007\000\002\003\006\000\002\003\003\000\002\003" +
    "\011\000\002\003\007\000\002\003\007\000\002\003\011" +
    "\000\002\003\004\000\002\003\005\000\002\003\004\000" +
    "\002\003\006\000\002\003\004\000\002\003\004\000\002" +
    "\003\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\006\000\002\002\006\000\002\002\005\000" +
    "\002\002\010\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\004\000\002\002\005\000\002\002\005\000\002" +
    "\002\004\000\002\007\003\000\002\007\005\000\002\006" +
    "\005\000\002\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\016\012\013\016\012\055\005\056\010\057" +
    "\016\060\014\001\002\000\020\002\ufffe\012\ufffe\016\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\060\ufffe\001\002\000\006\004" +
    "\ufff3\042\ufff3\001\002\000\020\002\ufffd\012\ufffd\016\ufffd" +
    "\055\ufffd\056\ufffd\057\ufffd\060\ufffd\001\002\000\004\004" +
    "\042\001\002\000\006\004\ufff4\042\ufff4\001\002\000\020" +
    "\002\000\012\000\016\000\055\000\056\000\057\000\060" +
    "\000\001\002\000\004\004\022\001\002\000\006\004\ufff1" +
    "\042\ufff1\001\002\000\006\004\ufff5\042\ufff5\001\002\000" +
    "\020\002\ufffc\012\ufffc\016\ufffc\055\ufffc\056\ufffc\057\ufffc" +
    "\060\ufffc\001\002\000\006\004\ufff2\042\ufff2\001\002\000" +
    "\020\002\021\012\013\016\012\055\005\056\010\057\016" +
    "\060\014\001\002\000\020\002\uffff\012\uffff\016\uffff\055" +
    "\uffff\056\uffff\057\uffff\060\uffff\001\002\000\004\002\001" +
    "\001\002\000\006\004\ufff0\037\023\001\002\000\016\012" +
    "\013\016\026\055\005\056\010\057\016\060\014\001\002" +
    "\000\020\012\uffef\016\uffef\040\uffef\055\uffef\056\uffef\057" +
    "\uffef\060\uffef\001\002\000\004\004\034\001\002\000\004" +
    "\004\033\001\002\000\020\012\013\016\026\040\031\055" +
    "\005\056\010\057\016\060\014\001\002\000\020\012\uffee" +
    "\016\uffee\040\uffee\055\uffee\056\uffee\057\uffee\060\uffee\001" +
    "\002\000\004\021\032\001\002\000\020\002\uffeb\012\uffeb" +
    "\016\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\001\002\000" +
    "\006\004\ufff0\042\ufff0\001\002\000\006\021\035\042\036" +
    "\001\002\000\070\002\uffed\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\027\uffed\040\uffed\041\uffed\042\uffed\045" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\060\uffed\001\002\000\004\050\037\001" +
    "\002\000\004\041\040\001\002\000\004\021\041\001\002" +
    "\000\070\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\027\uffec\040\uffec\041\uffec\042\uffec\045\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\057\uffec\060\uffec\001\002\000\010\017\043\021\035\042" +
    "\036\001\002\000\022\012\013\016\026\020\ufffa\047\ufffa" +
    "\055\005\056\010\057\016\060\014\001\002\000\006\020" +
    "\ufff9\047\ufff9\001\002\000\006\004\223\042\224\001\002" +
    "\000\006\020\050\047\047\001\002\000\016\012\013\016" +
    "\026\055\005\056\010\057\016\060\014\001\002\000\004" +
    "\037\051\001\002\000\060\004\057\005\072\006\063\007" +
    "\054\010\060\012\013\013\056\014\067\015\052\016\026" +
    "\017\062\027\071\042\073\045\066\050\074\051\076\052" +
    "\064\053\055\054\075\055\005\056\010\057\016\060\014" +
    "\001\002\000\004\021\221\001\002\000\064\004\uffea\005" +
    "\uffea\006\uffea\007\uffea\010\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\016\uffea\017\uffea\027\uffea\040\uffea\041\uffea\042" +
    "\uffea\045\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\060\uffea\001\002\000\004\017" +
    "\215\001\002\000\050\020\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\041\uffd7\043\uffd7\044\uffd7" +
    "\046\uffd7\047\uffd7\001\002\000\026\004\107\017\062\021" +
    "\213\027\071\045\066\050\074\051\076\052\064\053\055" +
    "\054\075\001\002\000\046\017\110\021\uffd5\022\207\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\042\111\043\uffd5\044" +
    "\uffd5\046\uffd5\001\002\000\004\017\201\001\002\000\042" +
    "\021\176\022\175\023\130\024\127\025\115\026\121\027" +
    "\113\031\126\032\117\033\123\034\131\035\120\036\125" +
    "\043\116\044\122\046\124\001\002\000\024\004\107\017" +
    "\062\027\071\045\066\050\074\051\076\052\064\053\055" +
    "\054\075\001\002\000\060\004\057\005\072\006\063\007" +
    "\054\010\060\012\013\013\056\014\067\015\052\016\026" +
    "\017\062\027\071\042\073\045\066\050\074\051\076\052" +
    "\064\053\055\054\075\055\005\056\010\057\016\060\014" +
    "\001\002\000\050\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\035\uffd8\036\uffd8\041\uffd8\043\uffd8\044\uffd8\046" +
    "\uffd8\047\uffd8\001\002\000\066\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\027\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\045\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\057\uffdb\060\uffdb\001\002\000\024\004\107" +
    "\017\062\027\071\045\066\050\074\051\076\052\064\053" +
    "\055\054\075\001\002\000\004\021\163\001\002\000\066" +
    "\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\027\uffe6" +
    "\040\uffe6\041\uffe6\042\uffe6\045\uffe6\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\001\002\000\024\004\107\017\062\027\071\045\066\050" +
    "\074\051\076\052\064\053\055\054\075\001\002\000\004" +
    "\017\105\001\002\000\062\004\057\005\072\006\063\007" +
    "\054\010\060\012\013\013\056\014\067\015\052\016\026" +
    "\017\062\027\071\041\102\042\073\045\066\050\074\051" +
    "\076\052\064\053\055\054\075\055\005\056\010\057\016" +
    "\060\014\001\002\000\050\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\uffda\031\uffda\032\uffda" +
    "\033\uffda\034\uffda\035\uffda\036\uffda\041\uffda\043\uffda\044" +
    "\uffda\046\uffda\047\uffda\001\002\000\050\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\041\uffd6" +
    "\043\uffd6\044\uffd6\046\uffd6\047\uffd6\001\002\000\050\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\041\uffd9\043\uffd9\044\uffd9\046\uffd9\047\uffd9\001\002" +
    "\000\062\004\057\005\072\006\063\007\054\010\060\012" +
    "\013\013\056\014\067\015\052\016\026\017\062\027\071" +
    "\040\101\042\073\045\066\050\074\051\076\052\064\053" +
    "\055\054\075\055\005\056\010\057\016\060\014\001\002" +
    "\000\064\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\027\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\045\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9" +
    "\001\002\000\020\002\ufffb\012\ufffb\016\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\001\002\000\066\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\027\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\045\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054" +
    "\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\001\002\000\062" +
    "\004\057\005\072\006\063\007\054\010\060\012\013\013" +
    "\056\014\067\015\052\016\026\017\062\027\071\041\104" +
    "\042\073\045\066\050\074\051\076\052\064\053\055\054" +
    "\075\055\005\056\010\057\016\060\014\001\002\000\066" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\027\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\045\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\001\002\000\024\004\107\017\062\027\071\045\066\050" +
    "\074\051\076\052\064\053\055\054\075\001\002\000\040" +
    "\020\160\023\130\024\127\025\115\026\121\027\113\031" +
    "\126\032\117\033\123\034\131\035\120\036\125\043\116" +
    "\044\122\046\124\001\002\000\054\017\110\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\041" +
    "\uffd5\042\111\043\uffd5\044\uffd5\046\uffd5\047\uffd5\001\002" +
    "\000\024\004\107\017\062\027\071\045\066\050\074\051" +
    "\076\052\064\053\055\054\075\001\002\000\024\004\107" +
    "\017\062\027\071\045\066\050\074\051\076\052\064\053" +
    "\055\054\075\001\002\000\040\023\130\024\127\025\115" +
    "\026\121\027\113\031\126\032\117\033\123\034\131\035" +
    "\120\036\125\041\114\043\116\044\122\046\124\001\002" +
    "\000\024\004\107\017\062\027\071\045\066\050\074\051" +
    "\076\052\064\053\055\054\075\001\002\000\050\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\041\uffd3\043\uffd3\044\uffd3\046\uffd3\047\uffd3\001\002\000" +
    "\024\004\107\017\062\027\071\045\066\050\074\051\076" +
    "\052\064\053\055\054\075\001\002\000\024\004\107\017" +
    "\062\027\071\045\066\050\074\051\076\052\064\053\055" +
    "\054\075\001\002\000\024\004\107\017\062\027\071\045" +
    "\066\050\074\051\076\052\064\053\055\054\075\001\002" +
    "\000\024\004\107\017\062\027\071\045\066\050\074\051" +
    "\076\052\064\053\055\054\075\001\002\000\024\004\107" +
    "\017\062\027\071\045\066\050\074\051\076\052\064\053" +
    "\055\054\075\001\002\000\024\004\107\017\062\027\071" +
    "\045\066\050\074\051\076\052\064\053\055\054\075\001" +
    "\002\000\024\004\107\017\062\027\071\045\066\050\074" +
    "\051\076\052\064\053\055\054\075\001\002\000\004\004" +
    "\137\001\002\000\024\004\107\017\062\027\071\045\066" +
    "\050\074\051\076\052\064\053\055\054\075\001\002\000" +
    "\024\004\107\017\062\027\071\045\066\050\074\051\076" +
    "\052\064\053\055\054\075\001\002\000\024\004\107\017" +
    "\062\027\071\045\066\050\074\051\076\052\064\053\055" +
    "\054\075\001\002\000\024\004\107\017\062\027\071\045" +
    "\066\050\074\051\076\052\064\053\055\054\075\001\002" +
    "\000\024\004\107\017\062\027\071\045\066\050\074\051" +
    "\076\052\064\053\055\054\075\001\002\000\050\020\uffc5" +
    "\021\uffc5\022\uffc5\023\130\024\127\025\115\026\121\027" +
    "\113\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5" +
    "\041\uffc5\043\uffc5\044\uffc5\046\124\047\uffc5\001\002\000" +
    "\050\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\041\uffcd\043\uffcd\044\uffcd\046\124\047\uffcd" +
    "\001\002\000\050\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\041\uffcc\043\uffcc\044\uffcc\046" +
    "\124\047\uffcc\001\002\000\050\020\uffc8\021\uffc8\022\uffc8" +
    "\023\130\024\127\025\115\026\121\027\113\031\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\041\uffc8\043\uffc8" +
    "\044\uffc8\046\124\047\uffc8\001\002\000\050\020\uffc9\021" +
    "\uffc9\022\uffc9\023\130\024\127\025\115\026\121\027\113" +
    "\031\126\032\117\033\123\034\131\035\uffc9\036\uffc9\041" +
    "\uffc9\043\uffc9\044\uffc9\046\124\047\uffc9\001\002\000\052" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\041\uffd2\042\140\043\uffd2\044\uffd2\046\uffd2\047" +
    "\uffd2\001\002\000\024\004\107\017\062\027\071\045\066" +
    "\050\074\051\076\052\064\053\055\054\075\001\002\000" +
    "\040\023\130\024\127\025\115\026\121\027\113\031\126" +
    "\032\117\033\123\034\131\035\120\036\125\041\142\043" +
    "\116\044\122\046\124\001\002\000\050\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\041\uffd1" +
    "\043\uffd1\044\uffd1\046\uffd1\047\uffd1\001\002\000\050\020" +
    "\uffc7\021\uffc7\022\uffc7\023\130\024\127\025\115\026\121" +
    "\027\113\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\041\uffc7\043\uffc7\044\uffc7\046\124\047\uffc7\001\002" +
    "\000\050\020\uffc3\021\uffc3\022\uffc3\023\130\024\127\025" +
    "\115\026\121\027\113\031\126\032\117\033\123\034\131" +
    "\035\120\036\125\041\uffc3\043\116\044\uffc3\046\124\047" +
    "\uffc3\001\002\000\050\020\uffcf\021\uffcf\022\uffcf\023\130" +
    "\024\127\025\115\026\uffcf\027\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\041\uffcf\043\uffcf\044\uffcf" +
    "\046\124\047\uffcf\001\002\000\050\020\uffca\021\uffca\022" +
    "\uffca\023\130\024\127\025\115\026\121\027\113\031\126" +
    "\032\117\033\123\034\131\035\uffca\036\uffca\041\uffca\043" +
    "\uffca\044\uffca\046\124\047\uffca\001\002\000\050\020\uffc6" +
    "\021\uffc6\022\uffc6\023\130\024\127\025\115\026\121\027" +
    "\113\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\041\uffc6\043\uffc6\044\uffc6\046\124\047\uffc6\001\002\000" +
    "\050\020\uffc2\021\uffc2\022\uffc2\023\130\024\127\025\115" +
    "\026\121\027\113\031\126\032\117\033\123\034\131\035" +
    "\120\036\125\041\uffc2\043\uffc2\044\uffc2\046\124\047\uffc2" +
    "\001\002\000\050\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\041\uffcb\043\uffcb\044\uffcb\046" +
    "\124\047\uffcb\001\002\000\050\020\uffce\021\uffce\022\uffce" +
    "\023\130\024\127\025\115\026\uffce\027\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\041\uffce\043\uffce" +
    "\044\uffce\046\124\047\uffce\001\002\000\042\020\uffc0\023" +
    "\130\024\127\025\115\026\121\027\113\031\126\032\117" +
    "\033\123\034\131\035\120\036\125\043\116\044\122\046" +
    "\124\047\uffc0\001\002\000\006\020\156\047\155\001\002" +
    "\000\024\004\107\017\062\027\071\045\066\050\074\051" +
    "\076\052\064\053\055\054\075\001\002\000\050\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\041\uffd4\043\uffd4\044\uffd4\046\uffd4\047\uffd4\001\002\000" +
    "\042\020\uffbf\023\130\024\127\025\115\026\121\027\113" +
    "\031\126\032\117\033\123\034\131\035\120\036\125\043" +
    "\116\044\122\046\124\047\uffbf\001\002\000\004\021\161" +
    "\001\002\000\066\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\027\uffe8\040\uffe8\041\uffe8\042\uffe8\045\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\057\uffe8\060\uffe8\001\002\000\050\020\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\041\uffc1\043" +
    "\uffc1\044\uffc1\046\124\047\uffc1\001\002\000\066\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\027\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\045\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\001\002" +
    "\000\050\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\041\uffc4\043\uffc4\044\uffc4\046\124\047" +
    "\uffc4\001\002\000\004\007\166\001\002\000\004\017\167" +
    "\001\002\000\024\004\107\017\062\027\071\045\066\050" +
    "\074\051\076\052\064\053\055\054\075\001\002\000\040" +
    "\020\171\023\130\024\127\025\115\026\121\027\113\031" +
    "\126\032\117\033\123\034\131\035\120\036\125\043\116" +
    "\044\122\046\124\001\002\000\004\021\172\001\002\000" +
    "\066\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\027" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\045\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060" +
    "\uffe5\001\002\000\040\020\174\023\130\024\127\025\115" +
    "\026\121\027\113\031\126\032\117\033\123\034\131\035" +
    "\120\036\125\043\116\044\122\046\124\001\002\000\050" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\041\uffd0\043\uffd0\044\uffd0\046\uffd0\047\uffd0\001" +
    "\002\000\024\004\107\017\062\027\071\045\066\050\074" +
    "\051\076\052\064\053\055\054\075\001\002\000\066\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\027\uffe1\040" +
    "\uffe1\041\uffe1\042\uffe1\045\uffe1\050\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\001" +
    "\002\000\040\021\200\023\130\024\127\025\115\026\121" +
    "\027\113\031\126\032\117\033\123\034\131\035\120\036" +
    "\125\043\116\044\122\046\124\001\002\000\066\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\027\uffde\040\uffde" +
    "\041\uffde\042\uffde\045\uffde\050\uffde\051\uffde\052\uffde\053" +
    "\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\001\002" +
    "\000\024\004\107\017\062\027\071\045\066\050\074\051" +
    "\076\052\064\053\055\054\075\001\002\000\040\020\203" +
    "\023\130\024\127\025\115\026\121\027\113\031\126\032" +
    "\117\033\123\034\131\035\120\036\125\043\116\044\122" +
    "\046\124\001\002\000\060\004\057\005\072\006\063\007" +
    "\054\010\060\012\013\013\056\014\067\015\052\016\026" +
    "\017\062\027\071\042\073\045\066\050\074\051\076\052" +
    "\064\053\055\054\075\055\005\056\010\057\016\060\014" +
    "\001\002\000\066\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\027\uffe3\040\uffe3\041\uffe3\042\uffe3\045\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3" +
    "\057\uffe3\060\uffe3\001\002\000\060\004\057\005\072\006" +
    "\063\007\054\010\060\012\013\013\056\014\067\015\052" +
    "\016\026\017\062\027\071\042\073\045\066\050\074\051" +
    "\076\052\064\053\055\054\075\055\005\056\010\057\016" +
    "\060\014\001\002\000\066\004\uffe2\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\027\uffe2\040\uffe2\041\uffe2\042\uffe2\045" +
    "\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\057\uffe2\060\uffe2\001\002\000\024\004\107\017" +
    "\062\027\071\045\066\050\074\051\076\052\064\053\055" +
    "\054\075\001\002\000\040\021\211\023\130\024\127\025" +
    "\115\026\121\027\113\031\126\032\117\033\123\034\131" +
    "\035\120\036\125\043\116\044\122\046\124\001\002\000" +
    "\066\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\027" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\045\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060" +
    "\uffe7\001\002\000\040\021\214\023\130\024\127\025\115" +
    "\026\121\027\113\031\126\032\117\033\123\034\131\035" +
    "\120\036\125\043\116\044\122\046\124\001\002\000\066" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\027\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\045\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf" +
    "\001\002\000\066\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\027\uffe0\040\uffe0\041\uffe0\042\uffe0\045\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\001\002\000\024\004\107\017\062\027" +
    "\071\045\066\050\074\051\076\052\064\053\055\054\075" +
    "\001\002\000\040\020\217\023\130\024\127\025\115\026" +
    "\121\027\113\031\126\032\117\033\123\034\131\035\120" +
    "\036\125\043\116\044\122\046\124\001\002\000\060\004" +
    "\057\005\072\006\063\007\054\010\060\012\013\013\056" +
    "\014\067\015\052\016\026\017\062\027\071\042\073\045" +
    "\066\050\074\051\076\052\064\053\055\054\075\055\005" +
    "\056\010\057\016\060\014\001\002\000\066\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\027\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\045\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\001\002\000" +
    "\066\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\027" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\045\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\001\002\000\006\020\ufff8\047\ufff8\001\002\000\006" +
    "\020\ufff7\047\ufff7\001\002\000\004\041\225\001\002\000" +
    "\004\004\226\001\002\000\006\020\ufff6\047\ufff6\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\016\005\016\010\003\011\014\012\006\015" +
    "\005\016\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\003\011\014\012\006\015\005\016\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\023\012\024\017\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\027\012\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\044\013\043\014" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\044\013\221\001\001\000\002\001" +
    "\001\000\016\002\060\003\052\004\076\006\067\010\064" +
    "\012\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\172\001\001\000\014\002\060\003\164\006\067" +
    "\010\064\012\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\161\001\001\000\002\001\001\000" +
    "\016\002\060\003\052\004\102\006\067\010\064\012\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\060\003\077\006\067\010\064\012\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\060\003\077\006\067\010\064\012\024" +
    "\001\001\000\002\001\001\000\004\002\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\152\007\153" +
    "\001\001\000\004\002\111\001\001\000\002\001\001\000" +
    "\004\002\151\001\001\000\002\001\001\000\004\002\150" +
    "\001\001\000\004\002\147\001\001\000\004\002\146\001" +
    "\001\000\004\002\145\001\001\000\004\002\144\001\001" +
    "\000\004\002\143\001\001\000\004\002\142\001\001\000" +
    "\002\001\001\000\004\002\135\001\001\000\004\002\134" +
    "\001\001\000\004\002\133\001\001\000\004\002\132\001" +
    "\001\000\004\002\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\002\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\002" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\201\001\001\000\002\001\001\000" +
    "\014\002\060\003\203\006\067\010\064\012\024\001\001" +
    "\000\002\001\001\000\014\002\060\003\205\006\067\010" +
    "\064\012\024\001\001\000\002\001\001\000\004\002\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\215" +
    "\001\001\000\002\001\001\000\014\002\060\003\217\006" +
    "\067\010\064\012\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private static final Logger LOGGER = LoggerFactory.getLogger(parser.class);

    /** Report a non fatal error (or warning).
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info)
    {
        String error = "";
        if (!(info instanceof Symbol))
            info = cur_token;
        if(info instanceof Symbol) {
            int line = ((Symbol)info).left;
            int column = ((Symbol)info).right;
            error = line  + ":" + column;
        }
        error += ": " + message;
        LOGGER.error(error);
    }

    /** Report a fatal error.
     *
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_fatal_error(String   message, Object   info) throws java.lang.Exception
    {
        /* stop parsing (not really necessary since we throw an exception, but) */
        done_parsing();

        /* use the normal error message reporting to put out the message */
        report_error(message, info);

        /* throw an exception */
        throw new Exception("Can't recover from previous error(s)");
    }

    public int getLine() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.left;
    }

    public int getColumn() {
        Symbol symbol = (Symbol) cur_token;
        return symbol.right;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CompoundStmt ::= LEFT_SQUARE RIGHT_SQUARE 
            {
              CompoundStatement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new CompoundStatement();
                                RESULT.setLine(lbleft);
                                RESULT.setColumn(lbright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompoundStmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CompoundStmt ::= LEFT_SQUARE StmtList RIGHT_SQUARE 
            {
              CompoundStatement RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new CompoundStatement(sl);
                                RESULT.setLine(lbleft);
                                RESULT.setColumn(lbright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompoundStmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExprList ::= ExprList COMMA Expr 
            {
              List<Expression> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                el.add(e);
                                RESULT = el;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExprList ::= Expr 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new ArrayList<Expression>();
                                RESULT.add(e);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= MINUS Expr 
            {
              Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new UnaryExpression(Operator.MINUS, e);
                                RESULT.setLine(mleft);
                                RESULT.setColumn(mright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr LAND Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BinaryExpression(Operator.LAND, e1, e2);
                                RESULT.setLine(e1left);
                                RESULT.setColumn(e2right);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr LOR Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BinaryExpression(Operator.LOR, e1, e2);
                                RESULT.setLine(e1left);
                                RESULT.setColumn(e2right);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= LNOT Expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new UnaryExpression(Operator.LNOT, e);
                                RESULT.setLine(eleft);
                                RESULT.setColumn(eright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Expr GREATER_EQ Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BinaryExpression(Operator.GREATER_EQ, e1, e2);
                                RESULT.setLine(e1left);
                                RESULT.setColumn(e1right);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr GREATER Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BinaryExpression(Operator.GREATER, e1, e2);
                                RESULT.setLine(e1left);
                                RESULT.setColumn(e1right);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr LESS_EQ Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BinaryExpression(Operator.LESS_EQ, e1, e2);
                                RESULT.setLine(e1left);
                                RESULT.setColumn(e1right);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr LESS Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BinaryExpression(Operator.LESS, e1, e2);
                                RESULT.setLine(e1left);
                                RESULT.setColumn(e1right);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Expr NOT_EQUAL Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BinaryExpression(Operator.NOT_EQUAL, e1, e2);
                                RESULT.setLine(e1left);
                                RESULT.setColumn(e1right);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= Expr EQUAL Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BinaryExpression(Operator.EQUAL, e1, e2);
                                RESULT.setLine(e1left);
                                RESULT.setColumn(e1right);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= Expr MODULUS Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BinaryExpression(Operator.MODULUS, e1, e2);
                                RESULT.setLine(e1left);
                                RESULT.setColumn(e1right);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= Expr DIVISION Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BinaryExpression(Operator.DIVISION, e1, e2);
                                RESULT.setLine(e1left);
                                RESULT.setColumn(e1right);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= Expr TIMES Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BinaryExpression(Operator.MULTIPLY, e1, e2);
                                RESULT.setLine(e1left);
                                RESULT.setColumn(e1right);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= Expr MINUS Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BinaryExpression(Operator.MINUS, e1, e2);
                                RESULT.setLine(e1left);
                                RESULT.setColumn(e1right);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr ::= Expr PLUS Expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BinaryExpression(Operator.PLUS, e1, e2);
                                RESULT.setLine(e1left);
                                RESULT.setColumn(e1right);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr ::= LPAREN Expr RPAREN 
            {
              Expression RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new ParenthesisExpression(e);
                                RESULT.setLine(lpleft);
                                RESULT.setColumn(lpright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr ::= Expr DOT IDENTIFIER LEFT_SQUARE Expr RIGHT_SQUARE 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new Expression(id, e1, e2);
                                RESULT.setLine(eleft);
                                RESULT.setColumn(eright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr ::= Expr DOT IDENTIFIER 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new Expression(e, id);
                                RESULT.setLine(eleft);
                                RESULT.setColumn(eright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr ::= IDENTIFIER LEFT_SQUARE Expr RIGHT_SQUARE 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new IdentifierExpression(id, e);
                                RESULT.setLine(idleft);
                                RESULT.setColumn(idright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr ::= IDENTIFIER LPAREN ExprList RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new IdentifierExpression(id, el);
                                RESULT.setLine(idleft);
                                RESULT.setColumn(idright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expr ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new IdentifierExpression(id);
                                RESULT.setLine(idleft);
                                RESULT.setColumn(idright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= CHARACTER_LITERAL 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Character l = (java.lang.Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new CharacterLiteralExpression(l);
                                RESULT.setLine(cleft);
                                RESULT.setColumn(cright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= BOOLEAN_LITERAL 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Boolean l = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new BooleanLiteralExpression(l);
                                RESULT.setLine(bleft);
                                RESULT.setColumn(bright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= STRING_LITERAL 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String l = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new StringLiteralExpression(l);
                                RESULT.setLine(sleft);
                                RESULT.setColumn(sright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= DOUBLE_LITERAL 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Double l = (java.lang.Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new DoubleLiteralExpression(l);
                                RESULT.setLine(lleft);
                                RESULT.setColumn(lright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.Integer l = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new IntegerLiteralExpression(l);
                                RESULT.setLine(lleft);
                                RESULT.setColumn(lright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stmt ::= VariableDefinition 
            {
              Statement RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDefinition vd = (VariableDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new VariableDefinitionStatement(vd);
                                RESULT.setLine(vdleft);
                                RESULT.setColumn(vdright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stmt ::= CONTINUE SEMICOLON 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new ContinueStatement();
                                RESULT.setLine(cleft);
                                RESULT.setColumn(cright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stmt ::= BREAK SEMICOLON 
            {
              Statement RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new BreakStatement();
                                RESULT.setLine(bleft);
                                RESULT.setColumn(bright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stmt ::= Expr EQ Expr SEMICOLON 
            {
              Statement RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new ExprEqExpr(e1, e2);
                                RESULT.setLine(e1left);
                                RESULT.setColumn(e1right);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stmt ::= RETURN SEMICOLON 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new ReturnStatement();
                                RESULT.setLine(rleft);
                                RESULT.setColumn(rright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stmt ::= RETURN Expr SEMICOLON 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new ReturnStatement(e);
                                RESULT.setLine(rleft);
                                RESULT.setColumn(rright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stmt ::= Expr SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new Expression(e);
                                RESULT.setLine(eleft);
                                RESULT.setColumn(eright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stmt ::= IF LPAREN Expr RPAREN Stmt ELSE Stmt 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new IfElseStatement(e, s1, s2);
                                RESULT.setLine(ileft);
                                RESULT.setColumn(iright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stmt ::= IF LPAREN Expr RPAREN Stmt 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new IfStatement(e, s);
                                RESULT.setLine(ileft);
                                RESULT.setColumn(iright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Stmt ::= WHILE LPAREN Expr RPAREN Stmt 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new WhileStatement(e, s);
                                RESULT.setLine(wleft);
                                RESULT.setColumn(wright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stmt ::= DO Stmt WHILE LPAREN Expr RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                RESULT = new DoWhileStatement(e, s);
                                RESULT.setLine(dleft);
                                RESULT.setColumn(dright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stmt ::= CompoundStmt 
            {
              Statement RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundStatement cs = (CompoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new CompoundStatement();
                                RESULT.setLine(csleft);
                                RESULT.setColumn(csright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stmt ::= IDENTIFIER EQ Expr SEMICOLON 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new AssignmentStatement(id, e);
                                RESULT.setLine(idleft);
                                RESULT.setColumn(idright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stmt ::= PRINT LPAREN Expr RPAREN SEMICOLON 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                                RESULT = new PrintStatement(e);
                                RESULT.setLine(pleft);
                                RESULT.setColumn(pright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // StmtList ::= StmtList Stmt 
            {
              List<Statement> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                sl.add(s);
                                RESULT = sl;
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // StmtList ::= Stmt 
            {
              List<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new ArrayList<Statement>();
                                RESULT.add(s);
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StmtList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // StructDefinition ::= STRUCT IDENTIFIER LCURLY VariableDefinitions RCURLY SEMICOLON 
            {
              StructDefinition RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<VariableDefinition> vd = (List<VariableDefinition>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                                RESULT = new StructDefinition(i, vd);
                                RESULT.setLine(sleft);
                                RESULT.setColumn(sright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StructDefinition",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VariableDefinition ::= TypeSpecifier IDENTIFIER LEFT_SQUARE INTEGER_LITERAL RIGHT_SQUARE SEMICOLON 
            {
              VariableDefinition RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TypeSpecifier ts = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		java.lang.Integer il = (java.lang.Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                                RESULT = new VariableDefinition(ts,i, il);
                                RESULT.setLine(tsleft);
                                RESULT.setColumn(tsright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDefinition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VariableDefinition ::= TypeSpecifier IDENTIFIER SEMICOLON 
            {
              VariableDefinition RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeSpecifier ts = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                                RESULT = new VariableDefinition(ts,i);
                                RESULT.setLine(tsleft);
                                RESULT.setColumn(tsright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDefinition",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VariableDefinitions ::= VariableDefinitions VariableDefinition 
            {
              List<VariableDefinition> RESULT =null;
		int vdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<VariableDefinition> vds = (List<VariableDefinition>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDefinition vd = (VariableDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                vds.add(vd);
                                RESULT = vds;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDefinitions",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VariableDefinitions ::= VariableDefinition 
            {
              List<VariableDefinition> RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDefinition vd = (VariableDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new ArrayList<VariableDefinition>();
                                RESULT.add(vd);
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDefinitions",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TypeSpecifier ::= STRUCT IDENTIFIER 
            {
              TypeSpecifier RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                RESULT = new Specifier(s, i); //Type("struct");
                                RESULT.setLine(sleft);
                                RESULT.setColumn(sright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypeSpecifier ::= VOID 
            {
              TypeSpecifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                RESULT = new Specifier(v); //Type("void");
                                RESULT.setLine(vleft);
                                RESULT.setColumn(vright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeSpecifier ::= DOUBLE_SPECIFIER 
            {
              TypeSpecifier RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                RESULT = new Specifier(ds); //Type("float");
                                RESULT.setLine(dsleft);
                                RESULT.setColumn(dsright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TypeSpecifier ::= INTEGER_SPECIFIER 
            {
              TypeSpecifier RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                RESULT = new Specifier(ls); //Type("int");
                                RESULT.setLine(isleft);
                                RESULT.setColumn(isright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeSpecifier ::= BOOLEAN_SPECIFIER 
            {
              TypeSpecifier RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                RESULT = new Specifier(bs); //Type("bool");
                                RESULT.setLine(bsleft);
                                RESULT.setColumn(bsright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeSpecifier ::= CHARACTER_SPECIFIER 
            {
              TypeSpecifier RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                RESULT = new Specifier(cs); //Type("char");
                                RESULT.setLine(csleft);
                                RESULT.setColumn(csright);
                             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ParameterDeclaration ::= TypeSpecifier LEFT_SQUARE RIGHT_SQUARE IDENTIFIER 
            {
              ParameterDeclaration RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeSpecifier ts = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new ParameterDeclarationifier(ts, i);
                                RESULT.setLine(tsleft);
                                RESULT.setColumn(tsright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ParameterDeclaration ::= TypeSpecifier IDENTIFIER 
            {
              ParameterDeclaration RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeSpecifier ts = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new ParameterDeclarationifier(ts, i);
                                RESULT.setLine(tsleft);
                                RESULT.setColumn(tsright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterDeclaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ParameterList ::= ParameterList COMMA ParameterDeclaration 
            {
              List<ParameterDeclaration> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<ParameterDeclaration> pl = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParameterDeclaration pd = (ParameterDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                pl.add(pd);
                                RESULT = pl;
                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ParameterList ::= ParameterDeclaration 
            {
              List<ParameterDeclaration> RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParameterDeclaration pd = (ParameterDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new ArrayList<ParameterDeclaration>();
                                RESULT.add(pd);
                           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ParameterList ::= 
            {
              List<ParameterDeclaration> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunctionDefinition ::= TypeSpecifier IDENTIFIER LPAREN ParameterList RPAREN LCURLY StmtList RCURLY 
            {
              FunctionDefinition RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		TypeSpecifier ts = (TypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		java.lang.String i = (java.lang.String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<ParameterDeclaration> pl = (List<ParameterDeclaration>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new FunctionDefinition(ts, i, pl, sl);
                                RESULT.setLine(tsleft);
                                RESULT.setColumn(tsright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDefinition",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Definitions ::= StructDefinition 
            {
              Definitions RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StructDefinition sd = (StructDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new Definitions(sd);
                                RESULT.setLine(sdleft);
                                RESULT.setColumn(sdright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Definitions",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Definitions ::= FunctionDefinition 
            {
              Definitions RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDefinition fd = (FunctionDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new Definitions(fd);
                                RESULT.setLine(fdleft);
                                RESULT.setColumn(fdright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Definitions",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Definitions ::= VariableDefinition 
            {
              Definitions RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableDefinition vd = (VariableDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new Definitions(vd);
                                RESULT.setLine(vdleft);
                                RESULT.setColumn(vdright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Definitions",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CompUnit ::= CompUnit Definitions 
            {
              List<Definitions> RESULT =null;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Definitions> cu = (List<Definitions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Definitions d = (Definitions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                cu.add(d);
                                RESULT = cu;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompUnit",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CompUnit ::= Definitions 
            {
              List<Definitions> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Definitions d = (Definitions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = new Arraylist<Definitions>();
                                RESULT.add(d);
                                RESULT.setLine(dleft);
                                RESULT.setColumn(dright);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompUnit",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CompUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Definitions> start_val = (List<Definitions>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

